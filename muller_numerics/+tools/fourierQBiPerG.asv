function out = fourierQBiPerG(r, y, alp, k, NN, N, M) 
%% fourierQBiPerG
%
% Overview:
%   Returns the Fourier coefficients of the quasi-biperiodic function \Gamma_\alpha^k(x,y) as as a function of x on a circle of radius r.
%
% Input:
%   r:          Radius of the circle containing x
%   y:          y
%   alp:        \alpha
%   k:          k
%   NN:         Limits for the Fourier coefficients, between -NN and NN
%   N:          Order of the sum when computing the lattice sums
%   M:          Order of the sum for the Fourier coefficients
%
% Output:
%   out:       The Fourier coefficients.
%
% References:
%   Mathematical and Computational Methods in Photonics - Tutorial Notes
%
% Authors:
%   Habib Ammari, Brian Fitzpatrick, Sanghyeon Yu, Erik Orvehed Hiltunen

%%% store lattice sum data %%%
L = 1;
data_Qn_posi = zeros(NN+M+1,1);
data_Qn_nega = zeros(NN+M,1);
for j=1:M+NN+1
    data_Qn_posi(j)=lattice_Sn(j-1,k,alp,L,N);
end
for j=1:M+NN   
    data_Qn_nega(j)=(-1)^j*lattice_Sn(j,k,[alp(1), alp(2)],L,N);
end
% data_Qn_posi
% data_Qn_nega
% abs(data_Qn_posi(2:end)-data_Qn_nega)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

r_2 = sqrt(y(1)*y(1)+y(2)*y(2));
theta_2 = atan2(y(1),y(2));
out = zeros(1,2*NN+1);
Qn = 0; 
for n = -NN:NN
    sgn = (-1)^mod(n,2);
    fprintf('------------------------ n = %d ------------------------\n\n', n);
    for l = -M:M
        if -n-l >= 0
            Qn = data_Qn_posi(-n-l+1);  
        else
            Qn = data_Qn_nega(n+l);
        end
        Qn
        fprintf('Qn: %.5e,\tJ_l:\t%.5e,\tQn*J_l: %.5e\n', Qn, besselj(l,k*r_2), Qn*besselj(l,k*r_2));
        out(NN+1+n) = out(NN+1+n) + sgn*Qn*besselj(l,k*r_2)*exp(1i*l*theta_2);
    end
    out(NN+1+n) = out(NN+1+n)*besselj(n,k*r);
    if r_2 > r
        out(NN+1+n) = out(NN+1+n) + sgn*besselh(-n,1,k*r_2)*exp(-1i*n*theta_2)*besselj(n,k*r);
    else
        out(NN+1+n) = out(NN+1+n) + sgn*besselh(n,1,k*r)*besselj(-n,k*r_2)*exp(-1i*n*theta_2);
    end
end
out = -1i/4*out;
end